[gd_scene load_steps=8 format=2]

[sub_resource type="PlaneMesh" id=1]
subdivide_width = 32
subdivide_depth = 32

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode specular_toon;

uniform float height_scale = 0.5;
uniform sampler2D noise;
uniform sampler2D normalmap;

varying vec2 vertex_position;

void vertex() {
  vertex_position = VERTEX.xz / 2.0;
  float height = texture(noise, vertex_position).x * height_scale;
  VERTEX.y += height * height_scale;
}

void fragment() {
  NORMALMAP = texture(normalmap, vertex_position).xyz;
float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
  RIM = 0.2;
  METALLIC = 0.0;
  ROUGHNESS = 0.01 * (1.0 - fresnel);
  ALBEDO = vec3(0.1, 0.3, 0.5) + (0.1 * fresnel);
}"

[sub_resource type="OpenSimplexNoise" id=4]
period = 128.0

[sub_resource type="NoiseTexture" id=5]
noise = SubResource( 4 )

[sub_resource type="OpenSimplexNoise" id=6]

[sub_resource type="NoiseTexture" id=7]
as_normalmap = true
noise = SubResource( 6 )

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/height_scale = 0.6
shader_param/noise = SubResource( 5 )
shader_param/normalmap = SubResource( 7 )

[node name="Spatial" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 1 )
material/0 = SubResource( 3 )

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.520198, -1.31958 )
light_color = Color( 0.8, 0.717647, 0.384314, 1 )
light_energy = 1.4
shadow_enabled = true
